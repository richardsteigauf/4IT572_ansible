- name: Deploy to EC2
  hosts: localhost
  gather_facts: yes
  connection: local
  vars_files:
    - 4IT572_ansible/ansible/group_vars/all/aws.yml

  tasks:
    - name: Generate unique deployment tag
      set_fact:
        deployment_tag: "DeployedAt{{ ansible_date_time.iso8601_micro }}"

    - name: Launch EC2 instance
      ec2_instance:
        instance_type: t2.large
        image_id: ami-0759f51a90924c166
        region: us-east-1
        key_name: devopss
        vpc_subnet_id: subnet-0117b4f9fcf59e9cd
        network:
          assign_public_ip: yes
        wait: yes
        count: 1
        security_group: eshop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
        tags:
          Name: "Eshop"
          DeploymentTag: "{{ deployment_tag }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.network_interfaces[0].association.public_ip }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"
      when: "'association' in item.network_interfaces[0] and item.network_interfaces[0].association.public_ip is defined"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"

- name: Configure EC2
  hosts: launched
  gather_facts: yes
  become: true

  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - docker
          - git
        state: latest
        update_cache: yes

    - name: Start Docker and enable on startup
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Set rights to docker
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Get project files from git
      git:
        repo: 'https://github.com/richardsteigauf/4IT572_docker.git'
        dest: ./app

    - name: Build docker with eshop
      shell: cd app && docker build -t myeshop:latest .

    - name: Run Docker with eshop
      docker_container:
        name: eshop
        image: myeshop:latest
        ports:
          - "80:3000"
        state: started
        restart_policy: always

- name: Cleanup old EC2 instances
  hosts: localhost
  gather_facts: yes
  connection: local
  vars:
    region: us-east-1

  tasks:
    - name: Gather facts of all instances
      ec2_instance_info:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
        region: "{{ region }}"
        filters:
          "tag:DeploymentTag": "DeployedAt*"
      register: ec2_instances

    - name: Terminate older instancess
      ec2_instance:
        instance_ids: "{{ item.instance_id }}"
        state: absent
        region: us-east-1
      loop: "{{ ec2_instances.instances }}"
      when: item.tags.DeploymentTag != deployment_tag
      environment:
        AWS_ACCESS_KEY_ID: "{{ access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ secret_key }}"
        AWS_SESSION_TOKEN: "{{ session_token }}"
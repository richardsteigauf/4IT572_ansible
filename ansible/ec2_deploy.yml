- name: Deploy to EC2
  hosts: localhost
  connection: local
  vars_files:
    - 4IT572_ansible/ansible/group_vars/all/aws.yml  # Include your vault file here

  tasks:
    - name: Generate unique deployment tag
      set_fact:
        deployment_tag: "{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"

    - name: Launch EC2 instance
      ec2_instance:
        instance_type: t2.large
        image_id: ami-0759f51a90924c166
        region: us-east-1
        key_name: devopss
        vpc_subnet_id: subnet-0117b4f9fcf59e9cd
        network:
            assign_public_ip: yes
        wait: yes
        count: 1
        security_group: eshop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
        tag_specifications:
          - resource_type: instance
            tags:
              Deployment: "{{ deployment_tag }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.network_interfaces[0].association.public_ip }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"
      when: "'association' in item.network_interfaces[0] and item.network_interfaces[0].association.public_ip is defined"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"

- name: Configure EC2
  hosts: launched
  connection: ssh
  tasks:

- name: Cleanup old EC2 instances
  hosts: localhost
  connection: local
  tasks:
    - name: Gather facts of all instances
      ec2_instance_info:
        filters:
          "tag:Deployment": "eshop"
          instance-state-name: [ "running", "stopped" ]
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_facts

    - name: Terminate old instances
      ec2:
        instance_ids: "{{ item.instance_id }}"
        state: absent
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      loop: "{{ ec2_facts.instances }}"
      when: item.tags.Deployment != deployment_tag
